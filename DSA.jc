Here are some common Data Structures and Algorithms (DSA) implemented in Java:


Arrays

1. Binary Search:

public class BinarySearch {
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
}


1. Linear Search:

public class LinearSearch {
    public static int linearSearch(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }
}



Linked Lists

1. Singly Linked List:

public class SinglyLinkedList {
    Node head;

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void print() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
    }
}


1. Doubly Linked List:

public class DoublyLinkedList {
    Node head;
    Node tail;

    public class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.prev = tail;
            tail.next = newNode;
            tail = newNode;
        }
    }

    public void print() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
    }
}



Stacks

1. Array-based Stack:

public class ArrayStack {
    int[] arr;
    int top;

    public ArrayStack(int size) {
        arr = new int[size];
        top = -1;
    }

    public void push(int data) {
        if (top < arr.length - 1) {
            arr[++top] = data;
        }
    }

    public int pop() {
        if (top >= 0) {
            return arr[top--];
        }
        return -1;
    }
}


1. Linked List-based Stack:

public class LinkedListStack {
    Node head;

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public void push(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    public int pop() {
        if (head != null) {
            int data = head.data;
            head = head.next;
            return data;
        }
        return -1;
    }
}



Queues

1. Array-based Queue:

public class ArrayQueue {
    int[] arr;
    int front;
    int rear;

    public ArrayQueue(int size) {
        arr = new int[size];
        front = 0;
        rear = 0;
    }

    public void enqueue(int data) {
        if (rear < arr.length) {
            arr[rear++] = data;
        }
    }

    public int dequeue() {
        if (front < rear) {
            return arr[front++];
        }
        return -1;
    }
}


1. Linked List-based Queue:

public class LinkedListQueue {
    Node head;
    Node tail;

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public void enqueue(int data) {
        Node newNode = new Node(data);
        if (tail == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
